// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	domain "github.com/es-debug/backend-academy-2024-go-template/internal/domain"
	mock "github.com/stretchr/testify/mock"

	pathutils "github.com/es-debug/backend-academy-2024-go-template/pkg/pathutils"
)

// Inizializer is an autogenerated mock type for the Inizializer type
type Inizializer struct {
	mock.Mock
}

type Inizializer_Expecter struct {
	mock *mock.Mock
}

func (_m *Inizializer) EXPECT() *Inizializer_Expecter {
	return &Inizializer_Expecter{mock: &_m.Mock}
}

// InitializeConfig provides a mock function with given fields:
func (_m *Inizializer) InitializeConfig() (*domain.FlagConfig, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for InitializeConfig")
	}

	var r0 *domain.FlagConfig
	var r1 error
	if rf, ok := ret.Get(0).(func() (*domain.FlagConfig, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *domain.FlagConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.FlagConfig)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Inizializer_InitializeConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitializeConfig'
type Inizializer_InitializeConfig_Call struct {
	*mock.Call
}

// InitializeConfig is a helper method to define mock.On call
func (_e *Inizializer_Expecter) InitializeConfig() *Inizializer_InitializeConfig_Call {
	return &Inizializer_InitializeConfig_Call{Call: _e.mock.On("InitializeConfig")}
}

func (_c *Inizializer_InitializeConfig_Call) Run(run func()) *Inizializer_InitializeConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Inizializer_InitializeConfig_Call) Return(_a0 *domain.FlagConfig, _a1 error) *Inizializer_InitializeConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Inizializer_InitializeConfig_Call) RunAndReturn(run func() (*domain.FlagConfig, error)) *Inizializer_InitializeConfig_Call {
	_c.Call.Return(run)
	return _c
}

// InitializeLogReport provides a mock function with given fields: config
func (_m *Inizializer) InitializeLogReport(config *domain.FlagConfig) domain.LogReport {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for InitializeLogReport")
	}

	var r0 domain.LogReport
	if rf, ok := ret.Get(0).(func(*domain.FlagConfig) domain.LogReport); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Get(0).(domain.LogReport)
	}

	return r0
}

// Inizializer_InitializeLogReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitializeLogReport'
type Inizializer_InitializeLogReport_Call struct {
	*mock.Call
}

// InitializeLogReport is a helper method to define mock.On call
//   - config *domain.FlagConfig
func (_e *Inizializer_Expecter) InitializeLogReport(config interface{}) *Inizializer_InitializeLogReport_Call {
	return &Inizializer_InitializeLogReport_Call{Call: _e.mock.On("InitializeLogReport", config)}
}

func (_c *Inizializer_InitializeLogReport_Call) Run(run func(config *domain.FlagConfig)) *Inizializer_InitializeLogReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.FlagConfig))
	})
	return _c
}

func (_c *Inizializer_InitializeLogReport_Call) Return(_a0 domain.LogReport) *Inizializer_InitializeLogReport_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Inizializer_InitializeLogReport_Call) RunAndReturn(run func(*domain.FlagConfig) domain.LogReport) *Inizializer_InitializeLogReport_Call {
	_c.Call.Return(run)
	return _c
}

// InitializePath provides a mock function with given fields: paths
func (_m *Inizializer) InitializePath(paths string) (*pathutils.PathResult, error) {
	ret := _m.Called(paths)

	if len(ret) == 0 {
		panic("no return value specified for InitializePath")
	}

	var r0 *pathutils.PathResult
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*pathutils.PathResult, error)); ok {
		return rf(paths)
	}
	if rf, ok := ret.Get(0).(func(string) *pathutils.PathResult); ok {
		r0 = rf(paths)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pathutils.PathResult)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(paths)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Inizializer_InitializePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitializePath'
type Inizializer_InitializePath_Call struct {
	*mock.Call
}

// InitializePath is a helper method to define mock.On call
//   - paths string
func (_e *Inizializer_Expecter) InitializePath(paths interface{}) *Inizializer_InitializePath_Call {
	return &Inizializer_InitializePath_Call{Call: _e.mock.On("InitializePath", paths)}
}

func (_c *Inizializer_InitializePath_Call) Run(run func(paths string)) *Inizializer_InitializePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Inizializer_InitializePath_Call) Return(_a0 *pathutils.PathResult, _a1 error) *Inizializer_InitializePath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Inizializer_InitializePath_Call) RunAndReturn(run func(string) (*pathutils.PathResult, error)) *Inizializer_InitializePath_Call {
	_c.Call.Return(run)
	return _c
}

// NewInizializer creates a new instance of Inizializer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInizializer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Inizializer {
	mock := &Inizializer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
