// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// LineParser is an autogenerated mock type for the LineParser type
type LineParser[T any] struct {
	mock.Mock
}

type LineParser_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *LineParser[T]) EXPECT() *LineParser_Expecter[T] {
	return &LineParser_Expecter[T]{mock: &_m.Mock}
}

// Parse provides a mock function with given fields: line
func (_m *LineParser[T]) Parse(line string) (*T, error) {
	ret := _m.Called(line)

	if len(ret) == 0 {
		panic("no return value specified for Parse")
	}

	var r0 *T
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*T, error)); ok {
		return rf(line)
	}
	if rf, ok := ret.Get(0).(func(string) *T); ok {
		r0 = rf(line)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(line)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LineParser_Parse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parse'
type LineParser_Parse_Call[T any] struct {
	*mock.Call
}

// Parse is a helper method to define mock.On call
//   - line string
func (_e *LineParser_Expecter[T]) Parse(line interface{}) *LineParser_Parse_Call[T] {
	return &LineParser_Parse_Call[T]{Call: _e.mock.On("Parse", line)}
}

func (_c *LineParser_Parse_Call[T]) Run(run func(line string)) *LineParser_Parse_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *LineParser_Parse_Call[T]) Return(_a0 *T, _a1 error) *LineParser_Parse_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LineParser_Parse_Call[T]) RunAndReturn(run func(string) (*T, error)) *LineParser_Parse_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewLineParser creates a new instance of LineParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLineParser[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *LineParser[T] {
	mock := &LineParser[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
