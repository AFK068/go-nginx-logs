// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Updater is an autogenerated mock type for the Updater type
type Updater[T any] struct {
	mock.Mock
}

type Updater_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *Updater[T]) EXPECT() *Updater_Expecter[T] {
	return &Updater_Expecter[T]{mock: &_m.Mock}
}

// Update provides a mock function with given fields: data
func (_m *Updater[T]) Update(data *T) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*T) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Updater_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Updater_Update_Call[T any] struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - data *T
func (_e *Updater_Expecter[T]) Update(data interface{}) *Updater_Update_Call[T] {
	return &Updater_Update_Call[T]{Call: _e.mock.On("Update", data)}
}

func (_c *Updater_Update_Call[T]) Run(run func(data *T)) *Updater_Update_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*T))
	})
	return _c
}

func (_c *Updater_Update_Call[T]) Return(_a0 error) *Updater_Update_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Updater_Update_Call[T]) RunAndReturn(run func(*T) error) *Updater_Update_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewUpdater creates a new instance of Updater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUpdater[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *Updater[T] {
	mock := &Updater[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
